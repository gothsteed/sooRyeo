<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="student">

	<select id="selectStudent" resultType="com.sooRyeo.app.domain.Student" parameterType="com.sooRyeo.app.dto.LoginDTO">  <!-- VO에 있는 필드명과 select 해온 컬럼명은 같아야한다!! -->
		SELECT *
		FROM tbl_department JOIN tbl_student
		ON tbl_department.department_seq = tbl_student.fk_department_seq
		WHERE student_id = #{id} AND pwd = #{password}	
	</select>

	<select id="getStudentById" resultType="com.sooRyeo.app.domain.Student" parameterType="int">
		SELECT *
		FROM tbl_department JOIN tbl_student
								 ON tbl_department.department_seq = tbl_student.fk_department_seq
		WHERE student_id = #{studentId}
	</select>
	
	
	
	
	<!-- 수업명, 교수명 select -->	
	<resultMap id="classListMap" type="com.sooRyeo.app.domain.Course">
    <id property="course_seq" column="course_seq" />
    <result property="semester_date" column="semester_date" />
    <association property="professor" javaType="com.sooRyeo.app.domain.Professor">
        <id property="prof_id" column="prof_id" />            
        <result property="name" column="professorName" />
    </association>
    <association property="curriculum" javaType="com.sooRyeo.app.domain.Curriculum">
        <id property="curriculum_seq" column="curriculum_seq" />
        <result property="fk_department_seq" column="department_seq" />
        <result property="name" column="className" />
        <result property="required" column="required" />
    </association>
	</resultMap>
	
	<select id="classList" parameterType="HashMap" resultMap="classListMap">
	    WITH
	    P AS (
	        SELECT name, prof_id 
	        FROM tbl_professor
	    ),
	    C AS (
	        SELECT curriculum_seq, name, fk_department_seq, required
	        FROM tbl_curriculum
	    ),
	    V AS (
	        SELECT course_seq, fk_curriculum_seq, fk_professor_id, fk_student_id, 
	        semester_date
	        FROM tbl_course JOIN tbl_registered_course
	        ON course_seq = fk_course_seq
	    )
	    
	    SELECT p.prof_id,
	           p.name AS professorName,
	           c.curriculum_seq,
	           c.name AS className,
	           c.fk_department_seq AS department_seq,
	           c.required AS required,
	           v.course_seq AS course_seq,
	           v.semester_date as semester_date
	    FROM P 
	    JOIN V ON V.fk_professor_id = P.prof_id
	    JOIN C ON V.fk_curriculum_seq = C.curriculum_seq
	    WHERE V.fk_student_id = #{userid}
	    <choose>
	        <when test="sysdate >= '24-07'">
	            AND '24-03' &lt; to_char(semester_date, 'yy-MM') 
	            AND to_char(semester_date, 'yy-MM') &lt;= #{sysdate}
	        </when>
	        <otherwise>
	            AND '24-03' &lt;= to_char(semester_date, 'yy-MM') 
	            AND to_char(semester_date, 'yy-MM') &lt; '24-07'
	        </otherwise>
	    </choose>
	</select>
	
	
	
	<!-- 수업  - 내 강의보기 -->	
	<select id="getlectureList" parameterType="String" resultType="com.sooRyeo.app.domain.Lecture">
		select lecture_seq, fk_course_seq
			 , video_file_name, lecture_file_name, lecture_title
			 , lecture_content
			 , start_date
     		 , end_date
		from tbl_lecture join tbl_course
		on tbl_lecture.fk_course_seq = tbl_course.course_seq
		where exist = 1 AND fk_course_seq = #{fk_course_seq}
		order by lecture_seq asc
	</select>
	
	
	<!-- 수업 - 이번주 강의보기 -->	
	<select id="getlectureList_week" parameterType="String" resultType="com.sooRyeo.app.domain.Lecture">
		select lecture_seq, fk_course_seq
		     , video_file_name, lecture_file_name, lecture_title
		     , lecture_content
		     , start_date
		     , end_date
		from tbl_lecture join tbl_course
		on tbl_lecture.fk_course_seq = tbl_course.course_seq
		where fk_course_seq = #{fk_course_seq} AND <![CDATA[start_date <= sysdate]]> AND <![CDATA[sysdate <= end_date]]>
		order by lecture_seq asc
	</select>
	
	
	<!-- 학생정보 - 학과명 가져오기 -->
	<select id="select_department" parameterType="Integer" resultType="String">
		select department_name
		from tbl_department join tbl_student
		on tbl_department.department_seq = tbl_student.fk_department_seq
		where student_id = #{student_id}
	</select>

	<!-- 학생정보 - 비밀번호 중복 -->
	<select id="pwdDuplicateCheck" resultType="int" parameterType="String">
		select count(*)
		from tbl_student
		where student_id = to_number(#{student_id}) and pwd = #{pwd}
	</select>

	<!-- 학생정보 - 전화번호 중복 -->
	<select id="telDuplicateCheck" resultType="int" parameterType="HashMap">
		select count(*)
		from tbl_student
		where student_id = to_number(#{student_id}) and tel = #{tel}
	</select>

	<!-- 학생정보 - 이메일 중복 -->
	<select id="emailDuplicateCheck" resultType="int" parameterType="HashMap">
		select count(*)
		from tbl_student
		where student_id = to_number(#{student_id}) and email = #{email}
	</select>

	<!-- 학생정보 - 계정에 파일이 있는지 확인 -->
	<select id="select_file_name" resultType="String" parameterType="HashMap">
		select img_name
		from tbl_student
		where student_id = to_number(#{student_id}) 
	</select>
	
	<!-- 학생정보 - 계정에 기존 파일 삭제 -->
	<update id="delFilename" parameterType="String">
		update tbl_student set img_name = NULL
		where student_id = to_number(#{student_id})
	</update>

	<!-- 학생정보 수정 -->
	<update id="student_info_edit" parameterType="HashMap">
		update tbl_student set pwd = #{pwd}, postcode=#{postcode}, address = #{address}, detailAddress=#{detailAddress}, extraAddress=#{extraAddress}
		, email = #{email}, tel = #{tel}
		<choose>
			<when test='img_name != "" '>
			, img_name = #{img_name}
			</when>
		</choose>  
		where student_id = to_number(#{student_id})
	</update>


	<!-- 수업 - 내 강의 - 과제 -->
	<resultMap type="HashMap" id="assignmentMap">
		<result property="title" 					column="title"						javaType="String" />
		<result property="content" 					column="content"					javaType="String" />
		<result property="start_date" 				column="start_date"					javaType="Date" />
		<result property="end_date" 				column="end_date"					javaType="Date" />
		<result property="submit_datetime" 			column="submit_datetime"			javaType="Date" />
		<result property="schedule_seq_assignment" 	column="schedule_seq_assignment"	javaType="String" />
		<result property="fk_course_seq" 			column="fk_course_seq"				javaType="String" />
	</resultMap>
	
	<select id="getassignment_List" parameterType="HashMap" resultMap="assignmentMap">
		SELECT V.title as title
			 , V.content as content
			 , V.start_date as start_date
			 , V.end_date as end_date
			 , B.submit_datetime as submit_datetime
			 , V.schedule_seq_assignment as schedule_seq_assignment
			 , V.fk_course_seq as fk_course_seq
		FROM
		(
		    select *
		    from tbl_assignment A join tbl_schedule S
		    on A.schedule_seq_assignment = S.schedule_seq
		    where schedule_type = 1
		)V LEFT JOIN
		(
            SELECT GUAJE.schedule_seq_assignment, GUAJE_SUBMIT.submit_datetime, GUAJE_SUBMIT.fk_schedule_seq_assignment 
            FROM tbl_assignment GUAJE LEFT JOIN 
            (
              select *
              from tbl_assignment_submit
              where fk_student_id = #{userid}
            ) GUAJE_SUBMIT
            ON GUAJE.schedule_seq_assignment = GUAJE_SUBMIT.fk_schedule_seq_assignment
		) B
		on V.schedule_seq_assignment = B.fk_schedule_seq_assignment
		where V.fk_course_seq = #{fk_course_seq}
	</select>
	


	<!-- 수업 - 내 강의 - 상세내용(1) -->
	<resultMap type="HashMap" id="assignment_detail_1_map">
		<result property="schedule_seq_assignment" 	column="schedule_seq_assignment"	javaType="String" />
		<result property="title" 					column="title"						javaType="String" />
		<result property="content" 					column="content"					javaType="String" />
		<result property="start_date" 				column="start_date"					javaType="Date" />
		<result property="end_date" 				column="end_date"					javaType="Date" />
		<result property="attatched_file" 			column="attatched_file"				javaType="String" />
		<result property="fk_course_seq" 			column="fk_course_seq"				javaType="String" />
		<result property="orgfilename" 				column="orgfilename"				javaType="String" />
	</resultMap>
	<select id="getassignment_detail_1" parameterType="String" resultMap="assignment_detail_1_map" resultType="HashMap">
	    select A.schedule_seq_assignment, S.title, A.content, S.start_date, S.end_date, A.attatched_file, A.fk_course_seq, A.orgfilename
    	from tbl_assignment A join tbl_schedule S
    	on A.schedule_seq_assignment = S.schedule_seq
    	where schedule_type = 1 AND schedule_seq_assignment = #{schedule_seq_assignment}
	</select>



	<!-- 수업 - 내 강의 - 상세내용(2) -->
	<resultMap type="HashMap" id="assignment_detail_2_map">
		<result property="score" 							column="score"							javaType="String" />
		<result property="submit_datetime" 					column="submit_datetime"				javaType="Date" />
		<result property="fk_student_id" 					column="fk_student_id"					javaType="String" />
		<result property="assignment_submit_seq" 			column="assignment_submit_seq"			javaType="String" />
		<result property="attatched_file" 					column="attatched_file"					javaType="String" />
		<result property="orgfilename" 						column="orgfilename"					javaType="String" />
		<result property="content" 							column="content"						javaType="String" />
		<result property="fk_schedule_seq_assignment" 		column="fk_schedule_seq_assignment"		javaType="String" />
	</resultMap>
	<select id="getassignment_detail_2" parameterType="HashMap" resultMap="assignment_detail_2_map">
		select B.score, B.submit_datetime, B.fk_student_id, B.assignment_submit_seq, B.attatched_file, B.content, B.orgfilename, B.fk_schedule_seq_assignment
		from tbl_assignment A join tbl_assignment_submit B
		on A.schedule_seq_assignment = B.fk_schedule_seq_assignment
		where fk_student_id = #{userid} AND fk_schedule_seq_assignment = #{schedule_seq_assignment}
	</select>



	<select id="select_prof_info" parameterType="String" resultType="com.sooRyeo.app.domain.Professor">
		select prof_id, name
		from tbl_course join tbl_professor
		on fk_professor_id = prof_id
		where course_seq = #{course_seq}
	</select>
	
	
	<insert id="insert_tbl_schedule" parameterType="HashMap">
		<selectKey keyProperty="schedule_seq" resultType="String" order="BEFORE">
			select schedule_seq.nextval FROM dual
		</selectKey>
		insert into tbl_schedule(Schedule_Seq, Title, Schedule_Type, start_date, end_date, confirm)
		values(#{schedule_seq}, #{title}, '4', to_date(#{start_date}, 'yyyymmddhh24miss'), to_date(#{end_date}, 'yyyymmddhh24miss'), '0')
	</insert>
	
	<insert id="insert_tbl_consult" parameterType="HashMap">
		insert into tbl_consult(fk_Schedule_Seq, fk_student_id, fk_prof_id, content)
		values(#{schedule_seq}, #{userid}, #{prof_id}, #{content})
	</insert>
	
	
	<!-- 수업 - 강의 한개 제목, 내용 select -->
	<resultMap type="HashMap" id="classPlay">
		<result property="lecture_title" 	column="lecture_title"	    javaType="String" />
		<result property="lecture_content" 	column="lecture_content"	javaType="String" />
		<result property="video_file_name" 	column="video_file_name"	javaType="String" />
		<result property="upload_video_file_name" 	column="upload_video_file_name"	javaType="String" />
		<result property="start_date" 	column="start_date"	javaType="String" />
		<result property="end_date" 	column="end_date"	javaType="String" />
	</resultMap>
	
	<select id="classPlay_One" parameterType="String" resultMap="classPlay">
		select lecture_title, lecture_content, video_file_name, upload_video_file_name,
			   to_char(start_date, 'yyyy-mm-dd hh24:mi') as start_date, to_char(end_date, 'yyyy-mm-dd hh24:mi') as end_date
		from tbl_lecture
		where lecture_seq = #{lecture_seq}
	</select>
	
	
	<!-- 출석 테이블에 내가 수강한 수업이 insert 되어진 값이 있는지 알아오기 위함  -->
	<select id="select_tbl_attendance" parameterType="HashMap" resultType="String">
		select attendance_seq
		from tbl_attendance
		where fk_student_id = #{userid} and fk_lecture_seq = #{lecture_seq}
	</select>
	
	<!-- 처음 동영상을 재생한 경우 tbl_attendance 에 insert -->
	<insert id="insert_tbl_attendance" parameterType="HashMap">
		insert into tbl_attendance (attendance_seq, fk_student_id, fk_lecture_seq, play_time)
		values (attendance_seq.nextval, #{userid}, #{lecture_seq}, #{play_time})
	</insert>
	
	
	<select id="select_play_time_lecture_time" parameterType="HashMap" resultType="int">
		select L.lecture_time - (A.play_time + #{play_time}) 
		from tbl_attendance A join tbl_lecture L
		on A.fk_lecture_seq  = L.lecture_seq
		where A.fk_student_id  = #{userid} and A.FK_LECTURE_SEQ = #{lecture_seq}
	</select>
	
	<!-- 처음 동영상을 재생한 경우 tbl_attendance play_time 컬럼 update -->
	<update id="update_tbl_attendance" parameterType="HashMap">
		update tbl_attendance set play_time = play_time + #{play_time}
		where fk_student_id = #{userid} and fk_lecture_seq = #{lecture_seq}
	</update>
	
	
	<!-- 출석을 완료했을 경우 isAttended 컬럼 1로 update 하기  -->
	<update id="update_tbl_attendance_isAttended">
		update tbl_attendance set ISATTENDED = '1', attended_date = sysdate
		where fk_student_id = #{userid} and fk_lecture_seq = #{lecture_seq}
	</update>
	
	
	
	<!-- === ajax학생 수강과목 가져와서 학점 계산하기(chart) === -->
	<resultMap type="HashMap" id="creditList_Map">
       <result property="name"    		column="name"    		javaType="String" />
       <result property="grade"         column="grade"          javaType="String" />
       <result property="semester_date" column="semester_date"  javaType="String" />
       <result property="gradename"     column="gradename"      javaType="String" />
       <result property="credit"        column="credit"         javaType="String" />
       <result property="required"      column="required"       javaType="String" />
   	</resultMap>
	<select id="select_creditList" resultMap="creditList_Map">
		select S.name as name, S.grade as grade, C.semester_date as semester_date, CU.name as gradename, CU.credit as credit, CU.required as required
		from
		tbl_student S 
		join tbl_registered_course R on S.student_id = R.fk_student_id
		join tbl_course C on R.fk_course_seq = C.course_seq
		join tbl_curriculum CU on C.fk_curriculum_seq = CU.curriculum_seq
		where student_id = #{student_id}	
	</select>
	
	
	<!-- 과제제출 -->
	<insert id="addComment" parameterType="HashMap">
		<!-- 첨부파일 없는 경우 -->
		<if test="attatched_file == null">
			insert into tbl_assignment_submit(assignment_submit_seq, fk_schedule_seq_assignment, fk_student_id, title, content) 
			values(assignment_submit_seq.nextval, #{fk_schedule_seq_assignment}, #{fk_student_id}, #{title}, #{content})
		</if>

		<!-- 첨부파일 있는 경우  -->
		<if test="attatched_file != null">
			insert into tbl_assignment_submit(assignment_submit_seq, fk_schedule_seq_assignment, fk_student_id, title, content, attatched_file, orgfilename) 
			values(assignment_submit_seq.nextval, #{fk_schedule_seq_assignment}, #{fk_student_id}, #{title}, #{content}, #{attatched_file}, #{orgfilename})
		</if>
	</insert>
	
	<select id="credit_point" parameterType="Integer" resultType="Integer">
		select sum(credit)
		from tbl_student S
		join tbl_registered_course R on S.student_id = R.fk_student_id
		join tbl_course C on R.fk_course_seq = C.course_seq
		join tbl_curriculum L on C.fk_curriculum_seq = L.curriculum_seq
		where student_id = #{student_id} and R.pass_status = 1
	</select>
	
	<insert id="application_status_change" parameterType="HashMap">
		insert into tbl_student_status_change(student_status_change_seq, fk_student_id, change_status)
		values(student_status_change_seq.nextval, #{student_id}, #{status_num})
	</insert>

	<select id="getApplication_status" parameterType="Integer" resultType="String">
		select change_status
		from tbl_student_status_change
		where fk_student_id = #{student_id}
	</select>

	<!-- 과제 제출 내용 보기 -->
	<resultMap type="HashMap" id="readcomment">
		<result property="assignment_submit_seq"	column="assignment_submit_seq"		javaType="String" />
		<result property="fk_student_id" 			column="fk_student_id"				javaType="String" />
		<result property="title" 					column="title"						javaType="String" />
		<result property="content" 					column="content"					javaType="String" />
		<result property="attatched_file" 			column="attatched_file"				javaType="String" />
		<result property="submit_datetime" 			column="submit_datetime"			javaType="Date" />
	</resultMap>
	<select id="getreadComment" parameterType="HashMap" resultMap="readcomment">
		select assignment_submit_seq, fk_student_id, title, content, attatched_file, submit_datetime
		from tbl_assignment_submit
		where fk_schedule_seq_assignment = #{fk_schedule_seq_assignment} AND fk_student_id = #{userid}
	</select>



	<!-- 파일첨부가 되어진 과제에서 서버에 업로드되어진 파일명 조회  -->
	<select id="getCommentOne" resultType="com.sooRyeo.app.dto.AssignmentSubmitDTO" parameterType="String">
		select assignment_submit_seq, attatched_file, orgfilename
		from tbl_assignment_submit
		where assignment_submit_seq = #{assignment_submit_seq}
	</select>
	

	
	<!-- 출석 현황 조회 -->
	<resultMap type="HashMap" id="attendanceListMap">
		<result property="fk_student_id"	column="fk_student_id"		javaType="String" />
		<result property="name" 			column="name"				javaType="String" />
		<result property="lecture_title" 	column="lecture_title"		javaType="String" />
		<result property="attended_date"  	column="attended_date"		javaType="String" />
	</resultMap>
	<select id="attendanceList" parameterType="HashMap" resultMap="attendanceListMap" >
		select D.fk_student_id AS fk_student_id
			 , A.name AS name
			 , C.lecture_title AS lecture_title
			 , D.attended_date AS attended_date
		from tbl_curriculum A JOIN tbl_course B
		on A.curriculum_seq = B.fk_curriculum_seq
		JOIN tbl_lecture C
		on B.course_seq = C.fk_course_seq
		JOIN tbl_attendance D
		on C.lecture_seq = D.fk_lecture_seq
		where isAttended = 1 And fk_student_id = #{userid} 
	    <if test="name != null and name.trim() != ''">
	        AND name = #{name}
	    </if>
	</select>
	
	
	
	<!-- 수업명 가져오기 -->
	<select id="lectureList" resultType="com.sooRyeo.app.domain.Curriculum">
		select name
		from tbl_curriculum
		order by curriculum_seq asc
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- // ajax학생 수강과목 가져와서 학점 계산하기(chart) 시작 -->
	<resultMap type="HashMap" id="myRequiredCreditMap">
		<result property="total_myRequired_credit"	column="total_myRequired_credit"		javaType="String" />
	</resultMap>
	<select id="student_myRequiredCredit" parameterType="HashMap" resultMap="myRequiredCreditMap">
		select  NVL(SUM(CU.credit), 0) AS total_myRequired_credit
		FROM
		tbl_student S 
		JOIN tbl_registered_course R ON S.student_id = R.fk_student_id
		JOIN tbl_course C ON R.fk_course_seq = C.course_seq
		JOIN tbl_curriculum CU ON C.fk_curriculum_seq = CU.curriculum_seq
		WHERE S.student_id = #{student_id} and CU.fk_department_seq is not null
        and CU.fk_department_seq = #{department_seq} and CU.required = 1 and R.pass_status = 1 
	</select>
	
	
	<resultMap type="HashMap" id="yourRequiredCreditMap">
		<result property="total_yourRequired_credit"	column="total_myRequired_credit"		javaType="String" />
	</resultMap>
	<select id="student_yourRequiredCredit" parameterType="HashMap" resultMap="yourRequiredCreditMap">
		select  NVL(SUM(CU.credit), 0) AS total_myRequired_credit
		FROM
		tbl_student S 
		JOIN tbl_registered_course R ON S.student_id = R.fk_student_id
		JOIN tbl_course C ON R.fk_course_seq = C.course_seq
		JOIN tbl_curriculum CU ON C.fk_curriculum_seq = CU.curriculum_seq
		WHERE S.student_id = #{student_id} and CU.fk_department_seq is not null
        and CU.fk_department_seq != #{department_seq} and CU.required = 1 and R.pass_status = 1 
	</select>
	
	
	<resultMap type="HashMap" id="UnrequiredCreditMap">
		<result property="total_Unrequired_credit"	column="total_Unrequired_credit"		javaType="String" />
	</resultMap>
	<select id="student_UnrequiredCredit" parameterType="int" resultMap="UnrequiredCreditMap">
		select NVL(SUM(CU.credit), 0) AS total_Unrequired_credit
		FROM
		tbl_student S 
		JOIN tbl_registered_course R ON S.student_id = R.fk_student_id
		JOIN tbl_course C ON R.fk_course_seq = C.course_seq
		JOIN tbl_curriculum CU ON C.fk_curriculum_seq = CU.curriculum_seq
		WHERE S.student_id = #{student_id} and CU.fk_department_seq is not null and CU.required = 0 and R.pass_status = 1
	</select>
	
	
	<resultMap type="HashMap" id="LiberalCreditMap">
		<result property="total_Liberal_credit"	column="total_Liberal_credit"		javaType="String" />
	</resultMap>
	<select id="student_LiberalCredit" parameterType="int" resultMap="LiberalCreditMap">
		select NVL(SUM(CU.credit), 0) AS total_Liberal_credit
		FROM
		tbl_student S 
		JOIN tbl_registered_course R ON S.student_id = R.fk_student_id
		JOIN tbl_course C ON R.fk_course_seq = C.course_seq
		JOIN tbl_curriculum CU ON C.fk_curriculum_seq = CU.curriculum_seq
		WHERE S.student_id = #{student_id} and CU.fk_department_seq is null and R.pass_status = 1
	</select>
	
	
	<!-- // ajax학생 수강과목 가져와서 학점 계산하기(chart) 끝 -->
	
	
	
	<select id="getToday_lec" parameterType="Integer" resultType="com.sooRyeo.app.domain.TodayLecture">
		select distinct(cu.name) as lec_name, p.name as prof_name, credit, start_period, end_period
		from tbl_student S
		join tbl_registered_course R on S.student_id = R.fk_student_id
		join tbl_course C on R.fk_course_seq = C.course_seq
		join tbl_curriculum CU on C.fk_curriculum_seq = CU.curriculum_seq
		join tbl_time T on C.course_seq = T.fk_course_seq
		join tbl_professor P on P.prof_id = C.fk_professor_id
		where student_id = #{student_id} and 
		      day_of_week =
		CASE
		    WHEN to_char(sysdate, 'd') = '2' THEN 1 
		    WHEN to_char(sysdate, 'd') = '3' THEN 2 
		    WHEN to_char(sysdate, 'd') = '4' THEN 3 
		    WHEN to_char(sysdate, 'd') = '5' THEN 4 
		    WHEN to_char(sysdate, 'd') = '6' THEN 5
		END
	</select>
	
	
	
	<!-- 하이차트 - 학생이 듣고있는 수업명 가져오는 메소드 	-->
	<select id="Curriculum_nameList" parameterType="Integer" resultType="com.sooRyeo.app.domain.Curriculum">
		select L.name AS name, R.registered_course_seq as registered_course_seq
		from tbl_registered_course R
		JOIN tbl_course C
		ON R.fk_course_seq = C.course_seq
		JOIN tbl_curriculum L
		ON C.fk_curriculum_seq = L.curriculum_seq
		where R.fk_student_id = #{student_id}
	</select>

	
	
	<!-- 하이차트 - 출석률  -->
	<resultMap type="HashMap" id="myAttendanceMap">
		<result property="name"							column="name"						javaType="String" />
		<result property="registered_course_seq"		column="registered_course_seq"		javaType="String" />
		<result property="attendance_rate"				column="attendance_rate"			javaType="String" />
	</resultMap>
	<select id="myAttendance_byCategoryJSON" parameterType="HashMap" resultMap="myAttendanceMap">
		SELECT 
		    L.name AS name,
		    R.registered_course_seq AS registered_course_seq,
		    ROUND(
		        COALESCE(
		            CASE 
		                WHEN total_lectures = 0 THEN 0 
		                ELSE (attended_lectures * 100.0 / total_lectures) 
		            END, 0
		        ), 0
		    ) AS attendance_rate
		FROM 
		    tbl_registered_course R
		JOIN 
		    tbl_course C ON R.fk_course_seq = C.course_seq
		JOIN 
		    tbl_curriculum L ON C.fk_curriculum_seq = L.curriculum_seq
		LEFT JOIN (
		    SELECT 
		        A.fk_course_seq,
		        COUNT(E.lecture_seq) AS total_lectures,
		        (SELECT COUNT(*)
		         FROM tbl_lecture C 
		         JOIN tbl_attendance D ON C.lecture_seq = D.fk_lecture_seq
		         WHERE D.fk_student_id = #{student_id} AND attended_date IS NOT NULL
		         AND C.fk_course_seq = A.fk_course_seq) AS attended_lectures
		    FROM 
		        tbl_registered_course A 
		    JOIN 
		        tbl_course B ON A.fk_course_seq = B.course_seq
		    JOIN 
		        tbl_lecture E ON B.course_seq = E.fk_course_seq
		    WHERE 
		        A.fk_student_id = #{student_id} AND exist = 1
		    GROUP BY 
		        A.fk_course_seq
		) sub ON C.course_seq = sub.fk_course_seq
		WHERE 
		    R.fk_student_id = #{student_id} AND name = #{name}
	</select>

	
	
	<!-- 학생 - 성적 취득현황 -->
	<resultMap type="HashMap" id="Acquisition_statusMap">
		<result property="student_id"		column="student_id"			javaType="String" />
		<result property="score"			column="score"				javaType="String" />
		<result property="mark"				column="mark"				javaType="String" />
		<result property="semester_date"	column="semester_date"		javaType="String" />
		<result property="name"				column="name"				javaType="String" />
	</resultMap>
	<select id="Acquisition_status" parameterType="int" resultMap="Acquisition_statusMap">
		SELECT B.fk_student_id as student_id,
			A.score as score,
	       	A.mark as mark,
	       	CASE 
	           WHEN EXTRACT(MONTH FROM C.semester_date) BETWEEN 3 AND 6 THEN 
	               TO_CHAR(EXTRACT(YEAR FROM C.semester_date)) || '년 1학기'
	           WHEN EXTRACT(MONTH FROM C.semester_date) BETWEEN 7 AND 12 THEN 
	               TO_CHAR(EXTRACT(YEAR FROM C.semester_date)) || '년 2학기'
	           ELSE '기타'
	       	END as semester_date,
	       	D.name as name
		FROM tbl_grade A
		JOIN tbl_registered_course B ON A.fk_registered_course_seq = B.registered_course_seq
		JOIN tbl_course C ON B.fk_course_seq = C.course_seq
		JOIN tbl_curriculum D ON C.fk_curriculum_seq = D.curriculum_seq
		WHERE B.fk_student_id = #{student_id}
	</select>
	
	
	
	
	<!-- 학생 - 성적 취득현황JSON -->
	<resultMap type="HashMap" id="Acquisition_statusJSON">
		<result property="student_id"		column="student_id"			javaType="String" />
		<result property="name"				column="name"				javaType="String" />
		<result property="semester_date"	column="semester_date"		javaType="String" />
		<result property="score"			column="score"				javaType="String" />
		<result property="mark"				column="mark"				javaType="String" />
	</resultMap>
	<select id="Acquisition_status_JSON" parameterType="HashMap" resultMap="Acquisition_statusJSON">
		SELECT B.fk_student_id as student_id,
			A.score as score,
	       	A.mark as mark,
	       	CASE 
	           WHEN EXTRACT(MONTH FROM C.semester_date) BETWEEN 3 AND 6 THEN 
	               TO_CHAR(EXTRACT(YEAR FROM C.semester_date)) || '년 1학기'
	           WHEN EXTRACT(MONTH FROM C.semester_date) BETWEEN 7 AND 12 THEN 
	               TO_CHAR(EXTRACT(YEAR FROM C.semester_date)) || '년 2학기'
	           ELSE '기타'
	       	END as semester_date,
	       	D.name as name
		FROM tbl_grade A
		JOIN tbl_registered_course B ON A.fk_registered_course_seq = B.registered_course_seq
		JOIN tbl_course C ON B.fk_course_seq = C.course_seq
		JOIN tbl_curriculum D ON C.fk_curriculum_seq = D.curriculum_seq
		WHERE B.fk_student_id = #{student_id} and to_char(C.semester_date, 'yyyy-MM') = #{semester_date}
	</select>
	
	
	
	<!-- 학기 별 개강과목JSON -->
	<resultMap id="classListJSONMap" type="com.sooRyeo.app.domain.Course">
	    <id property="course_seq" column="course_seq" />
	    <result property="semester_date" column="semester_date" />
	    <association property="professor" javaType="com.sooRyeo.app.domain.Professor">
	        <id property="prof_id" column="prof_id" />            
	        <result property="name" column="professorName" />
	    </association>
	    <association property="curriculum" javaType="com.sooRyeo.app.domain.Curriculum">
	        <id property="curriculum_seq" column="curriculum_seq" />
	        <result property="fk_department_seq" column="department_seq" />
	        <result property="name" column="className" />
	        <result property="required" column="required" />
	    </association>
	</resultMap>
	
	<select id="classListJSON" parameterType="HashMap" resultMap="classListJSONMap">
	    WITH
	    P AS (
	        SELECT name, prof_id 
	        FROM tbl_professor
	    ),
	    C AS (
	        SELECT curriculum_seq, name, fk_department_seq, required
	        FROM tbl_curriculum
	    ),
	    V AS (
	        SELECT course_seq, fk_curriculum_seq, fk_professor_id, fk_student_id, 
	        semester_date
	        FROM tbl_course JOIN tbl_registered_course
	        ON course_seq = fk_course_seq
	    )
	    
	    SELECT p.prof_id,
	           p.name AS professorName,
	           c.curriculum_seq,
	           c.name AS className,
	           c.fk_department_seq AS department_seq,
	           c.required AS required,
	           v.course_seq AS course_seq,
	           v.semester_date as semester_date
	    FROM P 
	    JOIN V ON V.fk_professor_id = P.prof_id
	    JOIN C ON V.fk_curriculum_seq = C.curriculum_seq
	    WHERE V.fk_student_id = #{student_id} and to_char(semester_date, 'yy-MM') = #{semester_date}
	</select>
	
	<select id="classListTimeJSON" parameterType="int" resultType="com.sooRyeo.app.domain.Time">
		select time_seq, day_of_week, fk_course_seq, start_period, end_period
		from tbl_time
		where fk_course_seq = ${course_seq}
	</select>
	
	
	
	
	
	
	
	
	
</mapper>